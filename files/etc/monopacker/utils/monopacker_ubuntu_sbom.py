#!/usr/bin/env python3

import subprocess
import platform
import argparse
import os
from datetime import datetime

VERSION = "1.0.0"

def get_system_info():
    info = {
        'OS': platform.system(),
        'OS Version': platform.version(),
        'Architecture': platform.machine(),
        'Processor': platform.processor(),
        'Python Version': platform.python_version(),
        'Kernel Version': subprocess.run(['uname', '-r'], stdout=subprocess.PIPE, text=True).stdout.strip()
    }
    return info

def get_lsb_release_info():
    lsb_info = {}
    try:
        with open('/etc/lsb-release', 'r') as file:
            lsb_data = file.readlines()
            for line in lsb_data:
                key, value = line.strip().split('=')
                lsb_info[key] = value
    except FileNotFoundError:
        lsb_info['LSB Release'] = 'Not available'
    return lsb_info

def get_taskcluster_info():
    taskcluster_info = {}
    commands = {
        'generic-worker': ['generic-worker', '--version'],
        'taskcluster-proxy': ['taskcluster-proxy', '--version'],
        'livelog': ['livelog', '--version'],
        'start-worker': ['start-worker', '--version']
    }
    
    for key, command in commands.items():
        try:
            result = subprocess.run(command, stdout=subprocess.PIPE, text=True, timeout=1)
            taskcluster_info[key] = result.stdout.strip()
        except (FileNotFoundError, subprocess.TimeoutExpired):
            taskcluster_info[key] = 'Not available'
    
    return taskcluster_info

def get_installed_packages():
    result = subprocess.run(['dpkg', '-l'], stdout=subprocess.PIPE, text=True)
    packages = []
    for line in result.stdout.split('\n')[5:]:
        if line:
            parts = line.split()
            packages.append({
                'Name': parts[1],
                'Version': parts[2],
                'Architecture': parts[3],
            })
    return packages

def get_pip_packages():
    result = subprocess.run(['pip3', 'list'], stdout=subprocess.PIPE, text=True)
    packages = []
    for line in result.stdout.split('\n')[2:]:
        if line:
            parts = line.split()
            name = parts[0]
            version = parts[1]
            packages.append({
                'Name': name,
                'Version': version
            })
    return packages

def generate_markdown(sbom):
    md = []
    md.append(f"# Software Bill of Materials (SBOM)")
    
    if sbom.get('monopacker_builder_name'):
        md.append(f"- **Monopacker Builder Name**: {sbom['monopacker_builder_name']}")
    if sbom.get('monopacker_commit'):
        md.append(f"- **Monopacker Commit**: {sbom['monopacker_commit']}")
    md.append(f"- **SBOM Generated By**: {sbom['generated_by']} {VERSION} on {sbom['generated_on']}")
    
    md.append(f"\n## System Information")
    for key, value in sbom['system_info'].items():
        md.append(f"- **{key}**: {value}")
    
    md.append(f"\n## LSB Release Information")
    for key, value in sbom['lsb_release_info'].items():
        md.append(f"- **{key}**: {value}")
    
    if sbom.get('additional_info'):
        md.append(f"\n## Additional Information")
        for key, value in sbom['additional_info'].items():
            md.append(f"- **{key}**: {value}")

    md.append(f"\n## Taskcluster Information")
    md.append(f"| Tool            | Version     |")
    md.append(f"|-----------------|-------------|")
    for key, value in sbom['taskcluster_info'].items():
        md.append(f"| {key} | {value} |")
    
    md.append(f"\n## Installed Packages")
    md.append(f"| Name | Version | Architecture |")
    md.append(f"|------|---------|--------------|")
    for pkg in sbom['packages']:
        md.append(f"| {pkg['Name']} | {pkg['Version']} | {pkg['Architecture']} |")
    
    md.append(f"\n## Python Packages (pip3 list)")
    md.append(f"| Name | Version |")
    md.append(f"|------|---------|")
    for pkg in sbom['pip_packages']:
        md.append(f"| {pkg['Name']} | {pkg['Version']} |")
    
    return '\n'.join(md)

def main():
    parser = argparse.ArgumentParser(description="Generate a markdown-formatted SBOM for a Ubuntu system.")
    parser.add_argument('-b', '--monopacker_builder_name', type=str, required=True, help='Name of the monopacker builder')
    parser.add_argument('-c', '--monopacker_commit', type=str, required=True, help='Commit of the monopacker')
    parser.add_argument('-a', '--additional-key-value', action='append', help='Additional key-value pairs to add to system info in the format key,value')
    
    args = parser.parse_args()
    
    system_info = get_system_info()
    lsb_release_info = get_lsb_release_info()
    taskcluster_info = get_taskcluster_info()
    
    additional_info = {}
    if args.additional_key_value:
        for item in args.additional_key_value:
            key, value = item.split(',', 1)
            additional_info[key.strip()] = value.strip()
    
    packages = get_installed_packages()
    pip_packages = get_pip_packages()
    
    sbom = {
        'system_info': system_info,
        'lsb_release_info': lsb_release_info,
        'taskcluster_info': taskcluster_info,
        'additional_info': additional_info,
        'packages': packages,
        'pip_packages': pip_packages,
        'monopacker_builder_name': args.monopacker_builder_name,
        'monopacker_commit': args.monopacker_commit,
        'generated_on': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        'generated_by': os.path.basename(__file__)
    }
    
    markdown_content = generate_markdown(sbom)
    
    with open('SBOM.md', 'w') as f:
        f.write(markdown_content)
    
    print("SBOM has been generated and saved to SBOM.md")

if __name__ == "__main__":
    main()